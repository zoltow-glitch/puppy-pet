(() => {
  const cnv = document.getElementById('game'), ctx = cnv.getContext('2d');
  const pHunger = document.getElementById('pHunger'), pFun = document.getElementById('pFun');
  const pClean = document.getElementById('pClean'), pEnergy = document.getElementById('pEnergy'), pMood = document.getElementById('pMood');
  const logEl = document.getElementById('log'), banner = document.getElementById('dayBanner');
  const btnFeed = document.getElementById('btnFeed'), btnPlay = document.getElementById('btnPlay');
  const btnClean = document.getElementById('btnClean'), btnSleep = document.getElementById('btnSleep'), btnReset = document.getElementById('btnReset');
  const clamp=(v,l,h)=>Math.max(l,Math.min(h,v)); const now=()=>performance.now(); const SAVE_KEY='puppy_cartoon_v2';
  let AC; function ensureAC(){ if(!AC) AC=new (window.AudioContext||window.webkitAudioContext)(); if(AC.state==='suspended') AC.resume(); }
  function tone(f=440,d=0.18,t='sine',v=0.25){ ensureAC(); const t0=AC.currentTime; const o=AC.createOscillator(), g=AC.createGain(); o.type=t; o.frequency.value=f; g.gain.setValueAtTime(0,t0); g.gain.linearRampToValueAtTime(v,t0+0.02); g.gain.exponentialRampToValueAtTime(0.0001,t0+d); o.connect(g).connect(AC.destination); o.start(t0); o.stop(t0+d+0.03); }
  function woof(){ ensureAC(); const t0=AC.currentTime, o=AC.createOscillator(), g=AC.createGain(); o.type='square'; o.frequency.setValueAtTime(360,t0); o.frequency.exponentialRampToValueAtTime(160,t0+0.14); g.gain.setValueAtTime(0.0001,t0); g.gain.exponentialRampToValueAtTime(0.5,t0+0.02); g.gain.exponentialRampToValueAtTime(0.0001,t0+0.24); o.connect(g).connect(AC.destination); o.start(t0); o.stop(t0+0.26); }
  const chew=()=>{tone(520,0.08,'triangle',0.3); setTimeout(()=>tone(420,0.08,'triangle',0.25),80)};
  const sparkle=()=>{tone(900,0.1,'sine',0.2); setTimeout(()=>tone(1200,0.1,'sine',0.15),100)};
  const sleepChime=()=>{tone(600,0.18,'sine',0.18); setTimeout(()=>tone(420,0.22,'sine',0.12),150)};
  const log=m=>{const d=document.createElement('div'); d.textContent=`[${new Date().toLocaleTimeString()}] ${m}`; logEl.prepend(d);};
  const state=JSON.parse(localStorage.getItem(SAVE_KEY)||'null')||{t:now(),hunger:80,fun:80,clean:80,energy:80,sleeping:false,age:0};
  const conf={decayPerMin:{hunger:3,fun:2.5,clean:2,energy:2},actionBoost:{feed:30,play:28,clean:32,sleep:36},actionCost:{play:18,clean:8},sleepRatePerMin:26,sleepTimeScale:3};
  const save=()=>localStorage.setItem(SAVE_KEY,JSON.stringify(state));
  const decay=m=>{state.hunger=clamp(state.hunger-conf.decayPerMin.hunger*m,0,100); state.fun=clamp(state.fun-conf.decayPerMin.fun*m,0,100); state.clean=clamp(state.clean-conf.decayPerMin.clean*m,0,100); state.energy=clamp(state.energy-conf.decayPerMin.energy*m,0,100);};
  const mood=()=>Math.round((state.hunger+state.fun+state.clean+state.energy)/4);
  const dog={x:130,y:210,dir:1,action:'idle',t:0,runT:0,jumpT:0,shakeT:0,chewT:0,sleepT:0,wagT:0,blinkT:0,blinkOpen:true};
  const fx=[]; const heart=(x,y)=>fx.push({type:'heart',x,y,t:0,d:1}); const bubble=(x,y)=>fx.push({type:'bubble',x,y,t:0,d:1,r:3+Math.random()*4}); const zzz=(x,y)=>fx.push({type:'zzz',x,y,t:0,d:1.3}); const ball=(x,y,vx,vy)=>fx.push({type:'ball',x,y,vx,vy,g:1000,t:0});
  function doFeed(){chew(); state.hunger=clamp(state.hunger+conf.actionBoost.feed,0,100); state.clean=clamp(state.clean-5,0,100); dog.action='eat'; dog.t=0; dog.chewT=0; for(let i=0;i<5;i++) heart(dog.x+50+Math.random()*10, dog.y-50-i*8); log('Fed your puppy.');}
  function doPlay(){woof(); if(state.energy<12){log('Too tired to play.'); return;} state.fun=clamp(state.fun+conf.actionBoost.play,0,100); state.energy=clamp(state.energy-conf.actionCost.play,0,100); dog.action='zoomies'; dog.t=0; dog.runT=0; dog.jumpT=0; ball(dog.x, dog.y-40, 320, -520); log('Play time!');}
  function doClean(){sparkle(); state.clean=clamp(state.clean+conf.actionBoost.clean,0,100); state.energy=clamp(state.energy-conf.actionCost.clean,0,100); dog.action='shake'; dog.t=0; dog.shakeT=0; for(let i=0;i<18;i++) bubble(dog.x-10+Math.random()*20, dog.y-10+Math.random()*10); log('Bath time.');}
  function doSleep(){sleepChime(); if(state.energy>=95){log('Already rested.'); return;} state.sleeping=true; dog.action='sleep'; dog.t=0; dog.sleepT=0; for(let i=0;i<4;i++) zzz(dog.x+40, dog.y-48-i*10); log('Sleeping...');}
  btnFeed.addEventListener('click',doFeed); btnPlay.addEventListener('click',doPlay); btnClean.addEventListener('click',doClean); btnSleep.addEventListener('click',doSleep);
  btnReset.addEventListener('click',()=>{ localStorage.removeItem(SAVE_KEY); location.reload(); });
  function updateUI(){ pHunger.value=state.hunger; pFun.value=state.fun; pClean.value=state.clean; pEnergy.value=state.energy; pMood.value=mood(); document.title=`Mood ${pMood.value}% â€¢ Puppy Pet`; }
  const draw={cap:(x,y,l,r,c)=>{ctx.fillStyle=c; ctx.beginPath(); ctx.arc(x,y,r,Math.PI/2,Math.PI*3/2); ctx.arc(x+l,y,r,Math.PI*3/2,Math.PI/2); ctx.closePath(); ctx.fill();},
              rect:(x,y,w,h,r,c)=>{ctx.fillStyle=c; ctx.beginPath(); ctx.moveTo(x+r,y); ctx.lineTo(x+w-r,y); ctx.arcTo(x+w,y,x+w,y+r,r); ctx.lineTo(x+w,y+h-r); ctx.arcTo(x+w,y+h,x+w-r,y+h,r); ctx.lineTo(x+r,y+h); ctx.arcTo(x,y+h,x,y+h-r,r); ctx.lineTo(x,y+r); ctx.arcTo(x,y,x+r,y,r); ctx.closePath(); ctx.fill();}};
  function drawBackground(dt){ ctx.clearRect(0,0,cnv.width,cnv.height); const t=new Date(); const prog=(t.getHours()+t.getMinutes()/60)/24; banner.style.transform=`translateX(${prog*100}%)`; ctx.fillStyle='#ffe58f'; const sunx=40+prog*(cnv.width-80); ctx.beginPath(); ctx.arc(sunx,44,20,0,Math.PI*2); ctx.fill(); ctx.globalAlpha=0.15; ctx.fillStyle='#fff'; for(let i=0;i<5;i++){const cx=(prog*cnv.width*1.6+i*160)%(cnv.width+240)-120; const cy=60+i*10; ctx.beginPath(); ctx.ellipse(cx,cy,34,18,0,0,Math.PI*2); ctx.fill(); ctx.beginPath(); ctx.ellipse(cx+24,cy+5,24,12,0,0,Math.PI*2); ctx.fill(); ctx.beginPath(); ctx.ellipse(cx-24,cy+6,20,10,0,0,Math.PI*2); ctx.fill();} ctx.globalAlpha=1; ctx.fillStyle='#6de38f'; ctx.fillRect(0,225,cnv.width,55); }
  function drawDog(dt){ const x=dog.x,y=dog.y,dir=dog.dir; ctx.beginPath(); ctx.ellipse(x,230,36,12,0,0,Math.PI*2); ctx.fillStyle='rgba(0,0,0,0.25)'; ctx.fill(); dog.wagT+=dt*10; let head=0,jump=0,shake=0,bob=Math.sin(dog.t*2.5)*2; if(dog.action==='zoomies'){jump=Math.sin(dog.jumpT*Math.PI)*55; head=Math.sin(dog.t*12)*0.25;} if(dog.action==='eat'){head=0.35*Math.sin(dog.chewT*22);} if(dog.action==='shake'){shake=Math.sin(dog.shakeT*70)*7;} if(dog.action==='sleep'){head=-0.55;} ctx.save(); ctx.translate(x,y-jump+bob); ctx.scale(dir,1); draw.rect(-54,-30+(shake?Math.sin(dog.shakeT*60)*2:0),108,52,20,'#c6a27a'); draw.rect(-36,-10,72,26,12,'#e7cfb2'); ctx.save(); ctx.translate(56,-10); ctx.rotate(Math.sin(dog.wagT)*0.55+(shake?Math.sin(dog.shakeT*100)*0.25:0)); draw.cap(0,0,34,8,'#c6a27a'); ctx.restore(); for(let i=0;i<2;i++){const off=i?22:-22; const step=dog.action==='zoomies'?Math.sin(dog.t*22+i)*9:Math.sin(dog.t*4+i)*1.5; draw.cap(-26+off,18+step,28,7,'#c6a27a'); draw.cap(-8+off,18-step,28,7,'#c6a27a');} ctx.save(); ctx.translate(-42,-30); ctx.rotate(head); draw.rect(-16,-14,56,40,18,'#c6a27a'); ctx.save(); ctx.translate(-12,-10); ctx.rotate(-0.65+(shake?Math.sin(dog.shakeT*100)*0.25:0)); draw.cap(0,0,26,9,'#a47f5a'); ctx.restore(); ctx.save(); ctx.translate(36,-8); ctx.rotate(0.75+(shake?Math.sin(dog.shakeT*100)*0.25:0)); draw.cap(0,0,22,8,'#a47f5a'); ctx.restore(); draw.rect(28,4,26,16,8,'#e7cfb2'); ctx.fillStyle='#222'; ctx.beginPath(); ctx.arc(50,12,3.4,0,Math.PI*2); ctx.fill(); dog.blinkT-=dt; if(dog.blinkT<=0){dog.blinkOpen=!dog.blinkOpen; dog.blinkT=dog.blinkOpen?1.2+Math.random()*1.2:0.09;} ctx.fillStyle='#222'; if(dog.blinkOpen){ctx.beginPath(); ctx.arc(12,6,3.2,0,Math.PI*2); ctx.fill(); ctx.beginPath(); ctx.arc(0,4,3.2,0,Math.PI*2); ctx.fill();} else {ctx.fillRect(10,5,7,2.2); ctx.fillRect(-2,3,7,2.2);} ctx.strokeStyle='#222'; ctx.lineWidth=2.2; ctx.beginPath(); if(dog.action==='eat'){ctx.arc(32,18,7,0,Math.PI);} else if(dog.action==='sleep'){ctx.moveTo(22,18); ctx.lineTo(36,18);} else {const m=mood(); if(m>66){ctx.arc(26,18,7,0,Math.PI);} else if(m>33){ctx.moveTo(20,20); ctx.lineTo(34,20);} else {ctx.arc(26,24,7,Math.PI,0,true);} } ctx.stroke(); ctx.restore(); ctx.restore(); }
  function drawFX(dt){ for(let i=fx.length-1;i>=0;i--){const e=fx[i]; e.t+=dt; const k=e.t/(e.d||1); if(k>=1){fx.splice(i,1); continue;} if(e.type==='heart'){ctx.globalAlpha=1-k; ctx.fillStyle='#ff6b9a'; const yy=e.y-k*48; ctx.beginPath(); ctx.moveTo(e.x,yy); ctx.bezierCurveTo(e.x-10,yy-12,e.x-18,yy+8,e.x,yy+18); ctx.bezierCurveTo(e.x+18,yy+8,e.x+10,yy-12,e.x,yy); ctx.fill(); ctx.globalAlpha=1;} else if(e.type==='bubble'){ctx.globalAlpha=0.7*(1-k); ctx.strokeStyle='#bde0fe'; ctx.lineWidth=2; const yy=e.y-k*30; ctx.beginPath(); ctx.arc(e.x,yy,e.r+k*5,0,Math.PI*2); ctx.stroke(); ctx.globalAlpha=1;} else if(e.type==='zzz'){ctx.globalAlpha=1-k; ctx.fillStyle='#e5e7eb'; const yy=e.y-k*26; ctx.font='16px system-ui'; ctx.fillText('Z',e.x,yy); ctx.globalAlpha=1;} else if(e.type==='ball'){e.vy+=1000*dt; e.x+=e.vx*dt; e.y+=e.vy*dt; if(e.y>225){e.y=225; e.vy*=-0.55; e.vx*=0.9;} ctx.fillStyle='#fbbf24'; ctx.beginPath(); ctx.arc(e.x,e.y-12,8,0,Math.PI*2); ctx.fill();} } }
  let last=now(); function tick(ts){ const dt=Math.min(0.05,(ts-last)/1000); last=ts; const delta=dt/60*(state.sleeping?conf.sleepTimeScale:1); decay(delta); if(state.sleeping){state.energy=clamp(state.energy+conf.sleepRatePerMin*delta,0,100); if(state.energy>=98) state.sleeping=false;} state.age+=delta; dog.t+=dt; switch(dog.action){case 'idle': if(Math.random()<0.003) dog.dir*=-1; break; case 'zoomies': dog.runT+=dt; dog.x+=320*dt*dog.dir; if(dog.x>cnv.width-70) dog.dir=-1; if(dog.x<70) dog.dir=1; dog.jumpT+=dt*1.6; if(dog.t>1.8){dog.action='idle'; dog.t=0;} break; case 'eat': dog.chewT+=dt; if(dog.t>1) {dog.action='idle'; dog.t=0;} break; case 'shake': dog.shakeT+=dt; if(dog.t>1) {dog.action='idle'; dog.t=0;} break; case 'sleep': dog.sleepT+=dt; if(Math.random()<0.02) fx.push({type:'zzz',x:dog.x+40,y:dog.y-48,t:0,d:1.3}); if(!state.sleeping){dog.action='idle'; dog.t=0;} break;} if(Math.random()<dt/45){const r=Math.random(); if(r<0.33){state.clean=clamp(state.clean-10,0,100); log('Mud paws.');} else if(r<0.66){state.fun=clamp(state.fun-8,0,100); log('Bored pup.');} else {state.hunger=clamp(state.hunger-8,0,100); log('Hungry whine.');}} drawBackground(dt); drawFX(dt); drawDog(dt); updateUI(); save(); requestAnimationFrame(tick); }
  function resize(){ const s=Math.min(window.devicePixelRatio||1,2); const w=cnv.clientWidth||cnv.width, h=cnv.clientHeight||cnv.height; cnv.width=w*s; cnv.height=h*s; ctx.setTransform(s,0,0,s,0,0); } new ResizeObserver(resize).observe(cnv); resize(); requestAnimationFrame(tick);
})();